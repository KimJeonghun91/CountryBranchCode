[{"/Users/suhyeon/Documents/GitHub/Country-branch-code/src/index.js":"1","/Users/suhyeon/Documents/GitHub/Country-branch-code/src/reportWebVitals.js":"2","/Users/suhyeon/Documents/GitHub/Country-branch-code/src/App.js":"3","/Users/suhyeon/Documents/GitHub/Country-branch-code/src/modules/Header.js":"4","/Users/suhyeon/Documents/GitHub/Country-branch-code/src/modules/Maps.js":"5","/Users/suhyeon/Documents/GitHub/Country-branch-code/src/modules/CbcConvert.js":"6"},{"size":500,"mtime":1610962802563,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610962802563,"results":"9","hashOfConfig":"8"},{"size":2010,"mtime":1612252125413,"results":"10","hashOfConfig":"8"},{"size":3575,"mtime":1612252051921,"results":"11","hashOfConfig":"8"},{"size":4328,"mtime":1612248763534,"results":"12","hashOfConfig":"8"},{"size":4905,"mtime":1612167303055,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"hprnju",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/suhyeon/Documents/GitHub/Country-branch-code/src/index.js",[],["29","30"],"/Users/suhyeon/Documents/GitHub/Country-branch-code/src/reportWebVitals.js",[],"/Users/suhyeon/Documents/GitHub/Country-branch-code/src/App.js",["31","32","33"],"/Users/suhyeon/Documents/GitHub/Country-branch-code/src/modules/Header.js",["34"],"/Users/suhyeon/Documents/GitHub/Country-branch-code/src/modules/Maps.js",["35"],"import React, { Component } from 'react';\nimport { MapContainer, MapConsumer, TileLayer, Polygon, Marker, Popup, Tooltip, useMap, useMapEvents } from 'react-leaflet';\nimport CbcConvert from './CbcConvert';\nimport { useState } from \"react\";\nimport { LatLng } from 'leaflet';\nfunction ZoomLevelCheck(props) {\n    const [zoomLevel, setZoomLevel] = useState(props.zoomLevel); // initial zoom level provided for MapContainer\n    var [lineArr, setLineArr] = useState([]);\n    const map = useMap();\n    var state = true;\n\n    const mapEvents = useMapEvents({\n        zoomend: () => {\n            setZoomLevel(mapEvents.getZoom());\n            props.setMenuState(false);\n            setLineArr(CbcConvert.lineArray(zoomLevel, map.getBounds()._southWest, map.getBounds()._northEast));\n        },\n        moveend: () => {\n            setLineArr(CbcConvert.lineArray(zoomLevel, map.getBounds()._southWest, map.getBounds()._northEast));\n        },\n        // 스크롤로 이동할 때 false\n        dragstart: () => {\n            props.setMenuState(false);\n        }\n    });\n\n    map.whenReady(function (e) {\n        if (state) {\n            lineArr = CbcConvert.lineArray(zoomLevel, map.getBounds()._southWest, map.getBounds()._northEast);\n            state = false;\n        }\n    });\n\n    if (lineArr.length != 0) {\n        return (\n            <div>\n                {lineArr.map(({ id, latLongArr, cbcText }) => {\n                    return <Polygon key={id} positions={latLongArr} color={'white'}\n                        eventHandlers={{\n                            click: (e) => {\n                                console.log([e.latlng[\"lat\"], e.latlng[\"lng\"]]);\n                                CbcConvert.converter([e.latlng[\"lng\"], e.latlng[\"lat\"]]);\n                            },\n                        }}>\n                        <Tooltip direction='bottom' opacity={1} permanent>\n                            <span>{cbcText}</span>\n                        </Tooltip>\n                    </Polygon>\n\n                })}\n            </div>\n        )\n    } else {\n        return null;\n    }\n\n}\nclass Maps extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n        }\n    }\n\n    // 검색으로 인해 lat, lng 값이 변경 됐을 경우에만 props 업데이트\n    shouldComponentUpdate(nextProps, nextState) {\n        if ((this.props.lat !== nextProps.lat) || (this.props.lng !== nextProps.lng)) {\n            return true\n        } else {\n            return false\n        }\n    }\n    render() {\n        //36.09698006901975,129.38089519358994\n        //37.55122041521281, 126.98823732740473\n        const position = [this.props.lat, this.props.lng];\n        const cbc = CbcConvert.converter([this.props.lng, this.props.lat]);\n        const cbcTxt = cbc[0] + \" \" + cbc[1] + \" \" + cbc[2];\n        return (\n            <div className=\"contents\">\n                <MapContainer style={{ height: \"100vh\" }} center={position} zoom={this.props.zoomLevel}\n                    scrollWheelZoom={true}>\n                    <TileLayer maxZoom={22} maxNativeZoom={18} zoom={this.props.zoomLevel}\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url='https://api.vworld.kr/req/wmts/1.0.0/B68996E4-BC0C-3C4A-B658-93658DD96E73/midnight/{z}/{y}/{x}.png'\n                    />\n                    <ZoomLevelCheck zoomLevel={this.props.zoomLevel} setMenuState={this.props.setMenuState} />\n                    <MapConsumer>\n                        {(map) => {\n                            // 헤더로부터 입력받은 값을 업데이트\n                            map.setView(new LatLng(this.props.lat, this.props.lng), this.props.zoomLevel)\n                            return null\n                        }}\n                    </MapConsumer>\n                    <Marker position={position}>\n                        <Popup>\n                            <span className=\"popupSpan\">\n                                <b>{cbcTxt}</b>\n                                <br />\n                                {this.props.lat}, {this.props.lng}</span>\n                        </Popup>\n                    </Marker>\n                </MapContainer >\n\n            </div >\n\n        )\n    }\n}\n\nexport default Maps;","/Users/suhyeon/Documents/GitHub/Country-branch-code/src/modules/CbcConvert.js",["36","37","38","39","40","41","42","43","44"],"import proj4 from 'proj4';\n\nconst w = { 7: \"가\", 8: \"나\", 9: \"다\", 10: \"라\", 11: \"마\", 12: \"바\", 13: \"사\" };\nconst h = { 13: \"가\", 14: \"나\", 15: \"다\", 16: \"라\", 17: \"마\", 18: \"바\", 19: \"사\", 20: \"아\" };\nconst grs80 = \"+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m +no_defs\";\nconst wgs84 = \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\";\n\nfunction converter(codinate) {\n    var wgs84P = proj4(wgs84, grs80, codinate);\n    var wP = parseInt(wgs84P[0].toString().split(\".\")[0]);\n    var hP = parseInt(wgs84P[1].toString().split(\".\")[0]);\n    var code = [w[parseInt(parseInt(wP) / 100000)] + h[parseInt(parseInt(hP) / 100000)], parseInt(wP % 100000 / 10), parseInt(hP % 100000 / 10)]\n    return code;\n}\nfunction smallPointXY(m, minX, maxX, minY, maxY) {\n    var p;\n    var TKM = 100000;\n    // 현재 bound가 700000~1500000, 1300000~2200000 이내인가\n    // 이내라면 bound 그대로 이용, 아니라면 최대 최소 지정\n    minX = (minX > 7 * TKM ? minX : 7 * TKM);\n    maxX = (maxX > 15 * TKM ? 15 * TKM : maxX);\n    minY = (minY > 13 * TKM ? minY : 13 * TKM);\n    maxY = (maxY > 22 * TKM ? 22 * TKM : maxY);\n\n    minX = (parseInt(minX / m) * m < minX ? (parseInt(minX / m) - 1) * m : parseInt(minX / m) * m);\n    minY = (parseInt(minY / m) * m < minY ? (parseInt(minY / m) - 1) * m : parseInt(minY / m) * m);\n    maxX = (parseInt(maxX / m) * m < maxX ? (parseInt(maxX / m) + 1) * m : parseInt(maxX / m) * m);\n    maxY = (parseInt(maxY / m) * m < maxY ? (parseInt(maxY / m) + 1) * m : parseInt(maxY / m) * m);\n\n    var pArr = [];\n    for (var x = minX; x <= maxX; x += m) {\n        var t = [];\n        for (var y = minY; y <= maxY; y += m) {\n            p = proj4(grs80, wgs84, [x, y]);\n            t.push(p);\n        }\n        pArr.push(t);\n    }\n    return pArr;\n}\nfunction isInnerinBound(codinate) {\n    var wgs84P = proj4(wgs84, grs80, codinate);\n    var TKM = 100000;\n    var filter = { 7: [13, 21], 8: [13, 20], 9: [14, 21], 10: [15, 21], 11: [15, 21], 12: [17, 21], 13: [18, 21] }\n\n    wgs84P[0] = Math.round(wgs84P[0]);\n    wgs84P[1] = Math.round(wgs84P[1]);\n\n    var t = parseInt(wgs84P[0] / TKM);\n    if (filter[t] != undefined) {\n        if (wgs84P[1] >= filter[t][0] * TKM && wgs84P[1] < filter[t][1] * TKM)\n            return true;\n    }\n    return false\n}\nfunction labelText(d, text) {\n    var returnTxt;\n    var t1, t2;\n    switch (d) {\n        case 100000:\n            returnTxt = text[0];\n            break;\n        case 10000:\n            t1 = parseInt(text[1] / 1000).toString();\n            t2 = parseInt(text[2] / 1000).toString();\n            returnTxt = text[0] + \" \" + t1 + \"XXX\" + \" \" + t2 + \"XXX\";\n            break;\n        case 1000:\n            t1 = parseInt(text[1] / 100).toString();\n            t2 = parseInt(text[2] / 100).toString();\n            returnTxt = text[0] + \" \" + t1 + \"XX\" + \" \" + t2 + \"XX\";\n            break;\n        case 100:\n            t1 = parseInt(text[1] / 10).toString();\n            t2 = parseInt(text[2] / 10).toString();\n            returnTxt = text[0] + \" \" + t1 + \"X\" + \" \" + t2 + \"X\";\n            break;\n        case 10:\n            returnTxt = text[0] + \" \" + text[1] + \" \" + text[2];\n            break;\n    }\n    return returnTxt;\n}\nfunction lineArray(zoomLevel, start, end) {\n    var reArr = [];\n    var start = proj4(wgs84, grs80, [start.lng, start.lat]);\n    var end = proj4(wgs84, grs80, [end.lng, end.lat]);\n    // switch문으로 수정\n    var divide = 100000\n    if (zoomLevel > 19) {\n        divide = 10;\n    }\n    else if (zoomLevel > 16) {\n        divide = 100;\n    }\n    else if (zoomLevel > 13) {\n        divide = 1000;\n    }\n    else if (zoomLevel > 10) {\n        divide = 10000;\n    } else {\n        divide = 100000;\n    }\n\n    var pArr = smallPointXY(divide, start[0], end[0], start[1], end[1]);\n\n    for (var i = 0; i < pArr.length; i++) {\n        for (var j = 0; j < pArr[0].length; j++) {\n            if (i < pArr.length - 1 && j < pArr[i].length - 1) {\n                var c = pArr[i][j];\n                if (isInnerinBound(c)) {\n                    var nx = pArr[i + 1][j];\n                    var ny = pArr[i][j + 1];\n                    var nxy = pArr[i + 1][j + 1];\n                    var cbc = converter([(nxy[0] + c[0]) / 2, (nxy[1] + c[1]) / 2])\n                    if (cbc != undefined) {\n                        cbc = labelText(divide, cbc)\n                    } else {\n                        cbc = \"\"\n                    }\n                    reArr.push({\n                        latLongArr: [[c[1], c[0]], [nx[1], nx[0]], [nxy[1], nxy[0]], [ny[1], ny[0]]],\n                        id: zoomLevel.toString() + \".\" + pArr[i][j] + \"y\",\n                        cbcText: cbc\n                    });\n                }\n\n            }\n        }\n    }\n\n    return reArr;\n}\nexport default { converter, lineArray };",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":38,"column":22,"nodeType":"55","messageId":"56","endLine":38,"endColumn":24},{"ruleId":"53","severity":1,"message":"54","line":38,"column":42,"nodeType":"55","messageId":"56","endLine":38,"endColumn":44},{"ruleId":"57","severity":1,"message":"58","line":57,"column":25,"nodeType":"59","endLine":57,"endColumn":75},{"ruleId":"53","severity":1,"message":"60","line":34,"column":24,"nodeType":"55","messageId":"56","endLine":34,"endColumn":26},{"ruleId":"53","severity":1,"message":"60","line":50,"column":19,"nodeType":"55","messageId":"56","endLine":50,"endColumn":21},{"ruleId":"61","severity":1,"message":"62","line":59,"column":5,"nodeType":"63","messageId":"64","endLine":81,"endColumn":6},{"ruleId":"65","severity":1,"message":"66","line":66,"column":52,"nodeType":"55","messageId":"67","endLine":66,"endColumn":53},{"ruleId":"65","severity":1,"message":"66","line":71,"column":51,"nodeType":"55","messageId":"67","endLine":71,"endColumn":52},{"ruleId":"65","severity":1,"message":"66","line":76,"column":50,"nodeType":"55","messageId":"67","endLine":76,"endColumn":51},{"ruleId":"68","severity":1,"message":"69","line":86,"column":9,"nodeType":"51","messageId":"70","endLine":86,"endColumn":14},{"ruleId":"68","severity":1,"message":"71","line":87,"column":9,"nodeType":"51","messageId":"70","endLine":87,"endColumn":12},{"ruleId":"53","severity":1,"message":"60","line":116,"column":29,"nodeType":"55","messageId":"56","endLine":116,"endColumn":31},{"ruleId":"72","severity":1,"message":"73","line":134,"column":1,"nodeType":"74","endLine":134,"endColumn":41},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-redeclare","'start' is already defined.","redeclared","'end' is already defined.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]