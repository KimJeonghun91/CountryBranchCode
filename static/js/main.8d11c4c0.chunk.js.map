{"version":3,"sources":["modules/CbcConvert.tsx","modules/Maps.tsx","modules/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["w","7","8","9","10","11","12","13","h","14","15","16","17","18","19","20","grs80","wgs84","converterToCbc","codinate","grs80P","proj4","wP","parseInt","toString","split","hP","Math","floor","isInnerinBound","TKM","filter","round","t","undefined","labelText","d","text","t1","t2","returnTxt","padStart","exportedObject","lineArray","zoomLevel","_start","_end","reArr","start","lng","lat","end","divide","pArr","m","minX","maxX","minY","maxY","p","x","y","push","smallPointXY","i","length","j","c","nx","ny","nxy","cbc","cbcText","latLongArr","id","converterToLatLng","_cbcCode","cbcCode","Object","keys","forEach","key","charAt","pow","ZoomLevelCheck","setMenuState","useState","mapZoomLevel","setMapZoomLevel","lineArr","setLineArr","map","useMap","state","mapEvents","useMapEvents","zoomend","getZoom","CbcConvert","getBounds","getSouthWest","getNorthEast","moveend","dragstart","whenReady","Polygon","positions","color","eventHandlers","click","e","console","log","latlng","Tooltip","direction","opacity","permanent","Maps","latLng","position","setPosition","useEffect","className","MapContainer","style","height","center","zoom","scrollWheelZoom","TileLayer","maxZoom","maxNativeZoom","attribution","url","MapConsumer","setView","LatLng","Marker","Popup","React","memo","App","menuState","historyList","setAppState","searchText","setSearchText","menuSateChangeMobile","test","navigator","userAgent","href","onSubmit","event","preventDefault","_lat","_lng","s","parseFloat","isNaN","alert","check1","values","includes","check2","check3","onFocus","onBlur","type","value","placeholder","onChange","target","historyArr","index","onClick","src","alt","toFixed","makeHistory","setLatLng","setZoomLevel","setHistoryList","Header","_zoomLevel","_menuState","_historyList","sameValue","item","otherValueList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d11c4c0.chunk.js","sourcesContent":["import proj4 from \"proj4\";\ninterface CBCObject {\n  [key: number]: string\n}\ninterface LatLng {\n  lat: number;\n  lng: number;\n}\nexport const w: CBCObject = { 7: \"가\", 8: \"나\", 9: \"다\", 10: \"라\", 11: \"마\", 12: \"바\", 13: \"사\" };\nexport const h: CBCObject = {\n  13: \"가\",\n  14: \"나\",\n  15: \"다\",\n  16: \"라\",\n  17: \"마\",\n  18: \"바\",\n  19: \"사\",\n  20: \"아\",\n};\nconst grs80: string =\n  \"+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m +no_defs\";\nconst wgs84: string =\n  \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\";\n\n/**\n * 위경도 좌표 -> 국가지점번호\n * @param codinate 위경도 좌표\n * @returns {string,number,number} 국가지점번호 [\"가나\",1234,1235]\n */\nconst converterToCbc = (codinate: [number, number]): [string, number, number] => {\n  let grs80P = proj4(wgs84, grs80, codinate);\n  let wP: number = parseInt(grs80P[0].toString().split(\".\")[0]);\n  let hP: number = parseInt(grs80P[1].toString().split(\".\")[0]);\n  let code: [string, number, number] = [\n    w[Math.floor(Math.floor(wP) / 100000)] + h[Math.floor(Math.floor(hP) / 100000)],\n    Math.floor((wP % 100000) / 10),\n    Math.floor((hP % 100000) / 10),\n  ];\n  return code;\n}\n// \n/**\n * 국가지점번호 -> 위경도 좌표\n * @param _cbcCode 국가지점번호\n * @returns {[number,number]} 위경도좌표\n */\nconst converterToLatLng = (_cbcCode: string): [number, number] | number => {\n  const cbcCode: string[] = _cbcCode.split(\" \");\n  let lat: number | null | undefined, lng: number | null | undefined;\n  // ex \"가나 1234 5678\"\n  // \"가나\"의 \"가\" value의 key 확인\n  Object.keys(w).forEach((key: string) => {\n    if (w[parseInt(key)] === cbcCode[0].charAt(0)) {\n      lat = parseInt(key);\n    }\n  });\n  // \"가나\"의 \"나\" value의 key 확인\n  Object.keys(h).forEach((key: string) => {\n    if (h[parseInt(key)] === cbcCode[0].charAt(1)) {\n      lng = parseInt(key);\n    }\n  });\n  // lat, lng의 값이 null이거나, 1234 5678의 길이가 같지 않을 때\n  if (lat === null || lng === null || cbcCode[1].length !== cbcCode[2].length) {\n    return -1;\n  } else {\n    // lat*100000+1234+5(marker의 중앙을 맞춰주기 위해서), lng도 동일한 로직\n    const length = cbcCode[1].length + 1;\n    lat = Math.pow(10, length) * lat! +\n      parseInt(cbcCode[1]) * Math.pow(10, 6 - length) +\n      5;\n    lng = Math.pow(10, length) * lng! +\n      parseInt(cbcCode[2]) * Math.pow(10, 6 - length) +\n      5;\n\n    var wgs84P: [number, number] = proj4(grs80, wgs84, [lat, lng]);\n    return wgs84P;\n  }\n}\n// grid 배열 생성\n/**\n * \n * @param m \n * @param minX minimum X position\n * @param maxX max X position\n * @param minY minimum Y position\n * @param maxY max Y position\n * @returns \n */\nconst smallPointXY = (m: number, minX: number, maxX: number, minY: number, maxY: number): any[] => {\n  let p: [number, number];\n  let TKM = 100000;\n  // 현재 bound가 700000~1500000, 1300000~2200000 이내인가\n  // 이내라면 bound 그대로 이용, 아니라면 최대 최소 지정\n  minX = minX > 7 * TKM ? minX : 7 * TKM;\n  maxX = maxX > 15 * TKM ? 15 * TKM : maxX;\n  minY = minY > 13 * TKM ? minY : 13 * TKM;\n  maxY = maxY > 22 * TKM ? 22 * TKM : maxY;\n\n  minX =\n    Math.floor(minX / m) * m < minX\n      ? (Math.floor(minX / m) - 1) * m\n      : Math.floor(minX / m) * m;\n  minY =\n    Math.floor(minY / m) * m < minY\n      ? (Math.floor(minY / m) - 1) * m\n      : Math.floor(minY / m) * m;\n  maxX =\n    Math.floor(maxX / m) * m < maxX\n      ? (Math.floor(maxX / m) + 1) * m\n      : Math.floor(maxX / m) * m;\n  maxY =\n    Math.floor(maxY / m) * m < maxY\n      ? (Math.floor(maxY / m) + 1) * m\n      : Math.floor(maxY / m) * m;\n\n  let pArr: any[] = [];\n  for (var x = minX; x <= maxX; x += m) {\n    let t: any[] = [];\n    for (var y = minY; y <= maxY; y += m) {\n      p = proj4(grs80, wgs84, [x, y]);\n      t.push(p);\n    }\n    pArr.push(t);\n  }\n  return pArr;\n}\n/**\n * grid 모양을 한국 지도에 맞게 보여주기 위한 필터링 작업\n * @param codinate \n * @returns {boolean}\n */\nconst isInnerinBound = (codinate: [number, number]) => {\n  let grs80P = proj4(wgs84, grs80, codinate);\n  let TKM = 100000;\n  let filter: any = {\n    7: [13, 21],\n    8: [13, 20],\n    9: [14, 21],\n    10: [15, 21],\n    11: [15, 21],\n    12: [17, 21],\n    13: [18, 21],\n  };\n\n  grs80P[0] = Math.round(grs80P[0]);\n  grs80P[1] = Math.round(grs80P[1]);\n\n  let t = Math.floor(grs80P[0] / TKM);\n  if (filter[t] !== undefined) {\n    if (grs80P[1] >= filter[t][0] * TKM && grs80P[1] < filter[t][1] * TKM)\n      return true;\n  }\n  return false;\n}\n/**\n * 각각의 grid에 표시할 Label Text 생성 작업\n * @param d 배율(100000|10000|1000|100|10)\n * @param  {[string, number, number]} text 국가지점번호 배열\n * @returns {string}\n */\nconst labelText = (d: number, text: [string, number, number]): string => {\n  let returnTxt: string = \"\";\n  let t1, t2;\n  switch (d) {\n    case 100000:\n      returnTxt = text[0];\n      break;\n    case 10000:\n      t1 = Math.floor(text[1] / 1000).toString();\n      t2 = Math.floor(text[2] / 1000).toString();\n      returnTxt = `${text[0]} ${t1}XXX ${t2}XXX`;\n      break;\n    case 1000:\n      t1 = Math.floor(text[1] / 100).toString();\n      t2 = Math.floor(text[2] / 100).toString();\n      returnTxt = `${text[0]} ${t1.toString().padStart(2, '0')}XX ${t2.toString().padStart(2, '0')}XX`;\n      break;\n    case 100:\n      t1 = Math.floor(text[1] / 10).toString();\n      t2 = Math.floor(text[2] / 10).toString();\n      returnTxt = `${text[0]} ${t1.toString().padStart(3, '0')}X ${t2.toString().padStart(3, '0')}X`;\n      break;\n    case 10:\n      returnTxt = `${text[0]} ${text[1].toString().padStart(4, '0')} ${text[2].toString().padStart(4, '0')}`;\n      break;\n    default:\n      break;\n  }\n  return returnTxt;\n}\n/**\n * grid를 그리는 작업\n * @param {number} zoomLevel zoom level\n * @param {LatLng} _start start lat, lng 좌표\n * @param {LatLng} _end  end lat, lng 좌표\n * @returns \n */\nconst lineArray = (zoomLevel: number, _start: LatLng, _end: LatLng) => {\n  let reArr = [];\n  let start = proj4(wgs84, grs80, [_start.lng, _start.lat]);\n  let end = proj4(wgs84, grs80, [_end.lng, _end.lat]);\n\n  // zoomLevel에 따라 grid 배열 생성을 다르게 한다.\n  let divide: number = 100000;\n  if (zoomLevel > 19) {\n    divide = 10;\n  } else if (zoomLevel > 16) {\n    divide = 100;\n  } else if (zoomLevel > 13) {\n    divide = 1000;\n  } else if (zoomLevel > 10) {\n    divide = 10000;\n  } else {\n    divide = 100000;\n  }\n\n  //grid 배열 생성\n  let pArr = smallPointXY(divide, start[0], end[0], start[1], end[1]);\n\n  for (let i = 0; i < pArr.length; i++) {\n    for (let j = 0; j < pArr[0].length; j++) {\n      if (i < pArr.length - 1 && j < pArr[i].length - 1) {\n        let c = pArr[i][j];\n        // 정해진 bound 안에 있다면, 라벨과 grid 표시하기\n        if (isInnerinBound(c)) {\n          let nx = pArr[i + 1][j];\n          let ny = pArr[i][j + 1];\n          let nxy = pArr[i + 1][j + 1];\n          let cbc: [string, number, number] = converterToCbc([(nxy[0] + c[0]) / 2, (nxy[1] + c[1]) / 2]);\n          let cbcText: string = \"\";\n          if (cbc !== undefined) {\n            cbcText = labelText(divide, cbc);\n          }\n          reArr.push({\n            latLongArr: [\n              [c[1], c[0]],\n              [nx[1], nx[0]],\n              [nxy[1], nxy[0]],\n              [ny[1], ny[0]],\n            ],\n            id: zoomLevel.toString() + \".\" + pArr[i][j] + \"y\",\n            cbcText: cbcText,\n          });\n        }\n      }\n    }\n  }\n\n  return reArr;\n}\nconst exportedObject = { converterToCbc, lineArray, converterToLatLng };\nexport default exportedObject;\n\n","import React, { useEffect } from \"react\";\nimport {\n  MapContainer,\n  MapConsumer,\n  TileLayer,\n  Polygon,\n  Marker,\n  Popup,\n  Tooltip,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport CbcConvert from \"./CbcConvert\";\nimport { useState } from \"react\";\nimport { LatLng } from \"leaflet\";\n\ninterface LatLngInterface {\n  lat: number;\n  lng: number;\n}\n\ninterface ZoomLevelCheckProps {\n  zoomLevel: number;\n  setMenuState: (menuState: boolean) => void;\n}\nconst ZoomLevelCheck: React.FC<ZoomLevelCheckProps> = ({ zoomLevel, setMenuState }) => {\n  const [mapZoomLevel, setMapZoomLevel] = useState<number>(zoomLevel); // initial zoom level provided for MapContainer\n  var [lineArr, setLineArr] = useState<any[]>([]);\n  const map = useMap();\n  var state = true; // 초기화 시 한번만 실행하기 위한 state 변수\n\n  const mapEvents = useMapEvents({\n    // 지도 zoom 종료\n    zoomend: () => {\n      setMapZoomLevel(mapEvents.getZoom());\n      setMenuState(false);\n      setLineArr(\n        CbcConvert.lineArray(\n          mapZoomLevel,\n          map.getBounds().getSouthWest(),\n          map.getBounds().getNorthEast()\n        )\n      );\n    },\n    // 지도 움직임 종료\n    moveend: () => {\n      setLineArr(\n        CbcConvert.lineArray(\n          mapZoomLevel,\n          map.getBounds().getSouthWest(),\n          map.getBounds().getNorthEast()\n        )\n      );\n    },\n    // 스크롤로 이동할 때 false\n    dragstart: () => {\n      setMenuState(false);\n    },\n  });\n\n  map.whenReady(() => {\n    if (state) {\n      // 전체지도에 대한 grid array 그리기\n      lineArr = CbcConvert.lineArray(\n        mapZoomLevel,\n        map.getBounds().getSouthWest(),\n        map.getBounds().getNorthEast()\n      );\n      state = false;\n    }\n  });\n\n  if (lineArr.length !== 0) {\n    return (\n      <div>\n        {lineArr.map(({ id, latLongArr, cbcText }) => {\n          return (\n            <Polygon\n              key={id}\n              positions={latLongArr}\n              color={\"white\"}\n              eventHandlers={{\n                click: (e) => {\n                  console.log([e.latlng[\"lat\"], e.latlng[\"lng\"]]);\n                  CbcConvert.converterToCbc([e.latlng[\"lng\"], e.latlng[\"lat\"]]);\n                },\n              }}\n            >\n              <Tooltip direction=\"bottom\" opacity={1} permanent>\n                <span>{cbcText}</span>\n              </Tooltip>\n            </Polygon>\n          );\n        })}\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\ninterface MapsProps {\n  latLng: LatLngInterface;\n  zoomLevel: number;\n  setMenuState: (menuState: boolean) => void;\n}\nconst Maps: React.FC<MapsProps> = ({ latLng, zoomLevel, setMenuState }) => {\n  const [position, setPosition] = useState<any>([latLng.lat, latLng.lng]);\n  const cbc = CbcConvert.converterToCbc([latLng.lng, latLng.lat]);\n  useEffect(() => {\n    setPosition([latLng.lat, latLng.lng]);\n  }, [latLng]);\n  return (\n    <div className=\"contents\">\n      <MapContainer\n        style={{ height: \"100vh\" }}\n        center={position}\n        zoom={zoomLevel}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          maxZoom={22}\n          maxNativeZoom={18}\n          // zoom={zoomLevel}\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://api.vworld.kr/req/wmts/1.0.0/532CA96F-C19D-3423-A745-FA04E44726C4/midnight/{z}/{y}/{x}.png\"\n        />\n        <ZoomLevelCheck\n          zoomLevel={zoomLevel}\n          setMenuState={setMenuState}\n        />\n        <MapConsumer>\n          {(map) => {\n            // 헤더로부터 입력받은 값을 업데이트\n            map.setView(\n              new LatLng(latLng.lat, latLng.lng),\n              zoomLevel\n            );\n            return null;\n          }}\n        </MapConsumer>\n        <Marker position={position}>\n          <Popup>\n            <span className=\"popupSpan\">\n              <b>{`${cbc[0]} ${cbc[1]} ${cbc[2]}`}</b>\n              <br />\n              {latLng.lat}, {latLng.lng}\n            </span>\n          </Popup>\n        </Marker>\n      </MapContainer>\n    </div>\n  );\n}\nexport default React.memo(Maps);\n","import \"../App.css\";\nimport React, { useState } from \"react\";\nimport CbcConvert, { h, w } from \"./CbcConvert\";\n\ninterface HeaderProps {\n  menuState: boolean;\n  historyList: any[];\n  setAppState: (lat: number, lng: number, cbcText: string, zoomLevel: number | null, menuState: boolean) => void;\n  setMenuState: (menuState: boolean) => void;\n}\nconst App: React.FC<HeaderProps> = ({ menuState, historyList, setAppState, setMenuState }) => {\n  const [searchText, setSearchText] = useState<string>(\"\"); // 검색창에 입력한 값\n\n  // 검색 버튼을 눌렀을 때 호출되는 handler\n  const pushToApp = (event: any) => {\n    // 기존의 form event를 막는다.\n    event.preventDefault();\n\n    let s: string[] = searchText.split(\",\");\n    let _lat: number, _lng: number;\n    // lat, lng 으로 주어질 때\n    if (s.length === 2) {\n      _lat = parseFloat(s[0]);\n      _lng = parseFloat(s[1]);\n      // 만약 _lat, _lng 이 숫자가 아니고, 한국 지도 범위를 벗어났을 때\n      if (\n        isNaN(_lat) ||\n        isNaN(_lng) ||\n        !(_lat > 31 && _lat < 39) ||\n        !(_lng > 124 && _lng < 133)\n      ) {\n        alert(\"ex. '32.66367, 124.43291'\");\n      } else {\n        var cbc = CbcConvert.converterToCbc([_lng, _lat]);\n        // App.js로 보내는 작업, App.js에서는 state 설정을 변경한다.\n        setAppState(\n          _lat,\n          _lng,\n          `${cbc[0]} ${cbc[1]} ${cbc[2]}`,\n          null,\n          true\n        );\n      }\n    } else {\n      s = searchText.split(\" \");\n      // 국가지점번호로 주어질 때\n      if (s.length === 3) {\n        //s[0](ex.가나)가 문자이며 두 글자이고, 범위 안에 해당될 때\n        let check1 = typeof s[0] === \"string\" && s[0].length === 2\n          && Object.values(w).includes(s[0][0]) && Object.values(h).includes(s[0][1]);\n        // s[1],s[2]는 숫자이면서 네 자리\n        let check2 = typeof parseInt(s[1]) === \"number\" && s[1].length === 4;\n        let check3 = typeof parseInt(s[2]) === \"number\" && s[2].length === 4;\n        if (!check1 || !check2 || !check3) {\n          alert(\"ex. '가가 1234 1234'\");\n          return;\n        } else {\n          var latLng: any = CbcConvert.converterToLatLng(searchText);\n          if (latLng === -1) {\n            // converterToLatLng Error\n            alert(\"ex. 가가 1234 1234\");\n          } else {\n            // 그 외의 경우\n            _lng = latLng[0];\n            _lat = latLng[1];\n            // App.js로 보내는 작업, App.js에서는 state 설정을 변경한다.\n            setAppState(_lat, _lng, searchText, null, true);\n          }\n        }\n      } else {\n        alert(\"ex. '32.66367, 124.43291' or '가가 1234 1234'\");\n      }\n    }\n  };\n\n  // history 메뉴 toggle (mobile 경우)\n  // mobile의 경우 history 버튼이 없기 때문에 검색 input focus 설정 시 history 영역 호출\n  const menuSateChangeMobile = () => {\n    // 모바일 환경에서만 input Focus, Blur로 history 영역 제어\n    const state = /Mobile|Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(\n      navigator.userAgent\n    );\n    if (state) {\n      setMenuState(true);\n    }\n  };\n  const makeHistory = (historyArr: any[], setAppState: any) => {\n    return (\n      <div>\n        {historyArr.map(({ lng, lat, cbcCode }, index) => {\n          return (\n            <div\n              key={index}\n              className=\"historyList\"\n              onClick={(event) => {\n                setAppState(lat, lng, cbcCode, null, true);\n                setSearchText(cbcCode);\n              }}\n            >\n              <img src=\"/CountryBranchCode/images/marker.png\" alt=\"\" />\n              <div className=\"codeDiv\">\n                <div className=\"cbcCode\">{cbcCode}</div>\n                <div className=\"latlng\">\n                  {lat.toFixed(5)}, {lng.toFixed(5)}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n  return (\n    <div className=\"header\">\n      <div className=\"leftMenu\">\n        <div className=\"title\">국가지점번호</div>\n        <div className=\"developer\">\n          <a href=\"https://doqtqu.tistory.com/186\">©doqtqu</a>\n        </div>\n      </div>\n      <div className=\"search-div\">\n        <form className=\"search\" onSubmit={pushToApp}>\n          <input\n            onFocus={menuSateChangeMobile}\n            onBlur={menuSateChangeMobile}\n            type=\"text\"\n            value={searchText}\n            placeholder=\"32.66367, 124.43291 or 가가 1234 1234\"\n            // 검색창에 입력하는 값이 달라질 때마다 호출되는 handler\n            onChange={(event) => setSearchText(event.target.value)}\n          />\n          <input type=\"submit\" value=\"검색\"></input>\n          <div\n            className={menuState ? \"historyOpen\" : \"historyClose\"}\n          >\n            {makeHistory(historyList, setAppState)}\n          </div>\n        </form>\n        {/* history 메뉴 toggle (Window의 경우) */}\n        <button className=\"toggleBtn\" onClick={() => setMenuState(!menuState)}>\n          <i className=\"fas fa-history lg\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import \"./App.css\";\nimport Maps from \"./modules/Maps\";\nimport Header from \"./modules/Header\";\nimport React from \"react\";\nimport { useState } from \"react\";\n\ninterface LatLngInterface {\n  lat: number;\n  lng: number;\n}\nfunction App() {\n  const [latLng, setLatLng] = useState<LatLngInterface>({\n    lat: 36.37216,\n    lng: 127.36035\n  });\n  const [zoomLevel, setZoomLevel] = useState<number>(7);\n  const [menuState, setMenuState] = useState<boolean>(false); // history menu toggle\n  const [historyList, setHistoryList] = useState<any[]>([]); // history list\n\n  //App.js의 state 생성\n  const setAppState = (_lat: number, _lng: number, _cbcCode: string, _zoomLevel: number | null, _menuState: boolean) => {\n    var _historyList: any[] = [...historyList];\n    if (_zoomLevel === null) {\n      _zoomLevel = 21;\n    }\n\n    if (_lat === null) {\n      _lat = latLng.lat;\n    } else if (_lng === null) {\n      _lng = latLng.lng;\n    } else {\n      // history array 요소 중 lat, lng이 같은 값\n      let sameValue = _historyList.filter(\n        (item) => item.lat === _lat && item.lng === _lng\n      );\n      if (sameValue.length === 0) {\n        sameValue = [{ cbcCode: _cbcCode, lat: _lat, lng: _lng }];\n      }\n      const otherValueList = _historyList.filter(\n        (item) => item.lat !== _lat || item.lng !== _lng\n      );\n      _historyList = [sameValue[0], ...otherValueList];\n    }\n    setLatLng({\n      lat: _lat,\n      lng: _lng\n    });\n    setZoomLevel(_zoomLevel);\n    setMenuState(_menuState);\n    setHistoryList(_historyList);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header\n        menuState={menuState}\n        historyList={historyList}\n        setAppState={setAppState}\n        setMenuState={setMenuState}\n      ></Header>\n      <Maps\n        latLng={latLng}\n        zoomLevel={zoomLevel}\n        setMenuState={setMenuState}\n      ></Maps>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}